{"version":3,"sources":["ToDoApp/ToDoItem/ToDoItem.js","ToDoApp/ToDo.js","common/Toast.js","App.js","index.js"],"names":["ToDoItem","name","isChecked","changeChecked","removeItem","shakeItemIndex","index","className","type","checked","onChange","e","onClick","ToDo","props","useState","newTask","setNewTask","toDoList","setToDoListState","backupToDoList","setBackupToDoList","setShakeItemIndex","console","log","setToDoList","addTask","toDo","foundIndex","findIndex","element","setTimeout","push","useEffect","localTODO","localStorage","getItem","JSON","parse","setItem","stringify","length","undoFlag","target","map","obj","indexDel","splice","disbaleClearAll","item","key","value","onKeyDown","event","keyCode","launch_toast","disabled","Toast","id","undo","currentTask","App","setCurrentTask","reverseUndoFlag","task","x","document","getElementById","replace","ReactDOM","render"],"mappings":"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","file":"static/js/main.12ad1ca0.chunk.js","sourcesContent":["import React from 'react';\nimport './ToDoItem.css'\nlet ToDoItem = ({ name, isChecked, changeChecked, removeItem, shakeItemIndex, index }) => {\n\n  return (\n    <div className=\"col-s-12 col-5 row-wrap\">\n      <div className={`row-item  ${(shakeItemIndex == index) ? 'shake-animation row-item-duplicate' : null}`}>\n        <label>\n          <input type=\"checkbox\" checked={isChecked} onChange={(e) => { changeChecked(e, name) }} /> {name}\n        </label>\n        <div className=\"close-button unselectable\" onClick={() => { removeItem(name) }}>\n          x\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ToDoItem;","import React, { useState, useEffect } from \"react\";\nimport ToDoItem from \"./ToDoItem/ToDoItem\";\nimport './ToDo.css'\n\nconst LOCAL_TODO = \"TO_DO_LIST\"\nconst CLEAR_ALL_TASKS = \"All your tasks have been cleared.\"\nlet ToDo = (props) => {\n\n  const [newTask, setNewTask] = useState();\n  const [toDoList, setToDoListState] = useState([]);\n  const [backupToDoList, setBackupToDoList] = useState([]);\n  const [shakeItemIndex, setShakeItemIndex] = useState(-1);\n\n  console.log('backupToDoList changed 1', toDoList)\n\n\n  let setToDoList = (toDoList) => {\n\n    console.log('backupToDoList changed ', toDoList)\n    setBackupToDoList(toDoList)\n    setToDoListState(toDoList)\n    console.log(backupToDoList)\n\n  }\n\n  let addTask = () => {\n\n    let toDo = [...toDoList];\n    var foundIndex = toDo.findIndex(element => element.name === newTask);\n    if (foundIndex > -1) {\n      setShakeItemIndex(foundIndex)\n      setTimeout(() => {\n        setShakeItemIndex(-1)\n      }, 1000);\n      return;\n    }\n    if (newTask) {\n      toDo.push({ name: newTask, isChecked: false });\n      setToDoList(toDo);\n\n    }\n  };\n\n  let clearTasks = () => {\n    props.launch_toast(CLEAR_ALL_TASKS)\n    setToDoListState([]);\n  }\n\n  useEffect(() => {\n    let localTODO = localStorage.getItem(LOCAL_TODO)\n    if (localTODO) {\n      setToDoList(JSON.parse(localTODO))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_TODO, JSON.stringify(toDoList))\n  }, [toDoList])\n\n  useEffect(() => {\n    if (backupToDoList.length > 0) setToDoList(backupToDoList)\n  }, [props.undoFlag])\n\n  let search = (event) => {\n    if (event.keyCode === 13) {\n      addTask()\n    }\n  }\n\n\n  let changeChecked = (e, name) => {\n\n    let toDo = [...toDoList];\n    let isChecked = e.target.checked\n    toDo = toDo.map(obj =>\n      obj.name === name ? { ...obj, isChecked } : obj\n    );\n    setToDoList(toDo)\n\n  }\n\n  let removeItem = (name) => {\n\n    let toDo = [...toDoList];\n    let indexDel;\n    toDo.map((obj, index) => {\n      if (obj.name === name) {\n        indexDel = index\n        return\n      }\n    }\n    );\n    toDo.splice(indexDel, 1)\n    setToDoList(toDo)\n  }\n\n  const disbaleClearAll = toDoList.length == 0;\n  return (\n    <>\n      <div className=\"row space-items\">\n\n        {\n          toDoList.map((item, index) => (\n            <ToDoItem\n              name={item.name}\n              key={item.name}\n              isChecked={item.isChecked}\n              changeChecked={changeChecked}\n              removeItem={removeItem}\n              index={index}\n              shakeItemIndex={shakeItemIndex}\n            />\n          ))\n        }\n      </div>\n      <div className=\"container\">\n        <div className=\"input-container\">\n          <input onChange={e => setNewTask(e.target.value)} onKeyDown={search} className=\"task-input\" />\n        </div>\n\n        <div className=\" row button-container\">\n          <button className={`base-button clear-button col-3 col-s-12 ${disbaleClearAll ? 'clear-button-disabled' : 'clear-button'}`}\n            onClick={clearTasks}\n            disabled={disbaleClearAll ? true : false}\n          >\n            CLEAR ALL\n          </button>\n          <button className=\" base-button add-button col-3 col-s-12\"\n            onClick={addTask}\n          >\n            ADD A TASK\n          </button>\n\n\n        </div>\n\n      </div>\n    </>\n  );\n};\n\nexport default ToDo;\n","import React from 'react';\nimport './toast.css'\nlet Toast = (props) => {\n    return (\n        <div id=\"toast\">\n            <button id=\"img\" onClick={props.undo}>UNDO</button>\n            <div id=\"desc\">{props.currentTask}</div>\n        </div>\n    );\n}\n\nexport default Toast;","import React, {useState} from \"react\";\nimport \"./App.css\";\nimport ToDo from './ToDoApp/ToDo'\nimport './common/grid.css'\nimport Toast from \"./common/Toast\";\n\nlet App = () => {\n  const [currentTask, setCurrentTask] = useState();\n  const [undoFlag, reverseUndoFlag] = useState(true);\n\n  let launch_toast = (task) => {\n\n    var x = document.getElementById(\"toast\")\n    setCurrentTask(task)\n    x.className = \"show\";\n    setTimeout(function () { x.className = x.className.replace(\"show\", \"\"); }, 5000);\n  }\n\n  let undo = () => {\n    reverseUndoFlag(!undoFlag)\n  }\n\n  return (\n    <>\n      <Toast undo={undo} currentTask={currentTask} />\n      <ToDo launch_toast={launch_toast} undoFlag={undoFlag} />\n    </>\n  );\n}\n\nexport default App;\n\n// To deploy to github pages, use $npm run deploy\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( < App / > , document.getElementById('root'));"],"sourceRoot":""}